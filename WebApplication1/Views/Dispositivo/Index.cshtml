@model IEnumerable<WebApplication1.Models.Dispositivo>

<!DOCTYPE html>
<html>

<head>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" type="text/css" href="~/css/site.css" />

    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
        integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="" />


    <meta name="viewport" content="width=device-width" />
    <title>Lista de Dispositivos</title>
</head>

<body>
    <div id="mapa" style="width:600px; height:400px;"></div>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
        integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
    @* MAPA *@

    <script>
        var map = L.map('mapa').setView([19.815852302707444, -97.36644780597221], 18);
        L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 18,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(map);

        // Añade los marcadores de los dispositivos al mapa
        @foreach (var dispositivo in Model)
        {
            <text>
                    L.marker([@dispositivo.Latitud, @dispositivo.Longitud]).addTo(map)
                    .bindPopup('@dispositivo.Nombre');
            </text>
        }

            map.on('click', function (e) {
                var lat = e.latlng.lat;
                var lon = e.latlng.lng;

                // Guardar las coordenadas en el LocalStorage
                localStorage.setItem('latitud', lat);
                localStorage.setItem('longitud', lon);
                window.location.href = '/Dispositivo/Create';
            });
    </script>




    <div class="container mt-5">
        <h2>Dispositivos</h2>
        <p>
            @Html.ActionLink("Agregar Dispositivo", "Create", null, new { @class = "btn btn-primary mb-3" })
        </p>
        <table class="table table-striped table-bordered table-sm">

            <thead>
                <tr>
                    <th>ID</th>
                    <th>Nombre</th>
                    <th>Latitud</th>
                    <th>Longitud</th>
                    <th>Descripción</th>
                    <th>Prioridad</th>
                    <th>Estatus</th>
                    <th>Litros Registrados</th>
                    <th>Fecha de Creacion</th>
                    <th>Responsable</th>
                    <th>Zona</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var dispositivo in Model)
                {
                    <tr>
                        <td>@dispositivo.Id</td>
                        <td>@dispositivo.Nombre</td>
                        <td>@dispositivo.Latitud</td>
                        <td>@dispositivo.Longitud</td>
                        <td>@dispositivo.Descripcion</td>
                        <td>@dispositivo.Prioridad</td>
                        <td>@dispositivo.Estatus</td>
                        <td>@dispositivo.LitrosRegistrados</td>
                        <td>@dispositivo.FechaCreacion</td>
                        <td>@dispositivo.Responsable</td>
                        <td>@dispositivo.Zona</td>
                        <td>
                            <form action="@Url.Action("Delete", "Dispositivo", new { id = dispositivo.Id })" method="post"
                                style="display:inline">
                                <input type="submit" value="Eliminar" class="btn btn-danger btn-sm"
                                    onclick="return confirm('¿Estás seguro de que deseas eliminar este dispositivo?');" />
                            </form>
                            <form method="post" asp-action="CambiarEstado" style="display:inline">
                                <input type="hidden" name="id" value="@dispositivo.Id" />
                                <input type="submit" value="Cambiar Estado" class="btn btn-warning btn-sm" />
                            </form>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="graficas-wrapper">
            @*
            Graficas *@

            <div class="grafica-container">
                <canvas id="litrosTotalChart" width="100" height="50"></canvas>
            </div>

            <div class="grafica-container">
                <canvas id="litrosChart" width="100" height="50"></canvas>
            </div>
            <div id="estatusChartContainer">
                <canvas id="estatusChart" width="80" height="40"></canvas>
            </div>

        </div>

</div>
    @* GRAFIAS *@
    <script>
        var litrosTotalChart;
        // Realiza una petición AJAX para obtener los datos
        $.getJSON('/Dispositivo/GetTotalLitros', function (data) {
            var ctxLitrosTotal = document.getElementById('litrosTotalChart').getContext('2d');
            litrosTotalChart = new Chart(ctxLitrosTotal, {
                type: 'bar',
                data: {
                    labels: ["Litros Totales"], // Esto es para que solo se muestre una barra con el total
                    datasets: [{
                        label: 'Litros Totales',
                        data: [data.totalLitros], // Asegúrate de acceder a la propiedad correcta del JSON
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        });

    </script>


    <script>
        var ctx = document.getElementById('litrosChart').getContext('2d');
        var litrosChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: @Html.Raw(Json.Serialize(ViewBag.Nombres)),
                datasets: [{
                    label: 'Litros Registrados Por Dispositivo',
                    data: @Html.Raw(Json.Serialize(ViewBag.Litros)),
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    </script>


    <script>
        var ctx2 = document.getElementById('estatusChart').getContext('2d');
        var estatusChart = new Chart(ctx2, {
            type: 'pie', // gráfico de tipo pie
            data: {
                labels: ["Apagados", "Encendidos"],
                datasets: [{
                    label: 'Estatus de Dispositivos',
                    data: [@Html.Raw(Json.Serialize(ViewBag.DispositivosApagados)), @Html.Raw(Json.Serialize(ViewBag.DispositivosEncendidos))],
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',  // Color para Apagados
                        'rgba(54, 162, 235, 0.2)'  // Color para Encendidos
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)'
                    ],
                    borderWidth: 1
                }]
            }
        });

    </script>

    <div id="contenedor"> </div>
    <script src="~/lib/signalr/signalr.js"></script>

    <script>
        const contenedor = document.getElementById("contenedor");
        const conexion = new signalR.HubConnectionBuilder()
            .withUrl("myHub")
            .build();
        conexion.start().then(function () {
            console.log("Conexión exitosa");

        }).catch((error) => {
            console.error("Error al conectarse al servidor de WebSocket", error);
        });

        conexion.on("DispositivoEliminado", function (nombreDispositivo, fechaHora) {
             console.log("Evento DispositivoEliminado recibido");
            MostrarNotificaciones(`Nombre: ${nombreDispositivo} Eliminado el ${fechaHora}`);
            actualizarTablaDispositivos();
            actualizarGraficaEstatus();
            actualizarGraficaLitros();
            actualizarGraficaLitrosTotales();
            actualizarMarcadores();
        });


        
        conexion.on("DispositivoAgregado", function (mensaje) {
            console.log("Evento DispositivoAgregado recibido");
            MostrarNotificaciones(mensaje);  // Esta función mostraría una notificación al usuario
            actualizarTablaDispositivos();  // Esta función actualiza la tabla
            actualizarGraficaEstatus();
            actualizarGraficaLitros();
            actualizarGraficaLitrosTotales();
            actualizarMarcadores();
        });
        conexion.on("EstatusCambiado", function (nombreDelDispositivo, nuevoEstatus) {
            MostrarNotificaciones(`Nombre: ${nombreDelDispositivo} ha cambiado su estado a: ${nuevoEstatus}`);
            actualizarGraficaEstatus();

        });
        conexion.on("ActualizarTablaDispositivos", function () {
            actualizarTablaDispositivos(); // Esta es la función que ya tenías definida para cargar la tabla con AJAX
        });
        conexion.on("TodosApagados", function (mensaje) {
            console.log("Evento TodosApagados recibido:", mensaje);
            MostrarNotificaciones(mensaje);
        });


        $.connection.hub.start().done(function () {
            // Código que se ejecuta una vez que la conexión con el hub ha comenzado
        });




        function actualizarTablaDispositivos() {
            $.get('/Dispositivo/GetAllDispositivos', function (data) {
                console.log(data);
                const tbody = $("table tbody");
                tbody.empty(); // Limpia el cuerpo de la tabla

                data.forEach(d => {
                    // Convierte el valor numérico de estatus a texto
                    const estatusTexto = d.estatus === 1 ? "Encendido" : "Apagado";

                    const row = `
                <tr>
                    <td>${d.id}</td>
                    <td>${d.nombre}</td>
                    <td>${d.latitud}</td>
                    <td>${d.longitud}</td>
                    <td>${d.descripcion}</td>
                    <td>${d.prioridad}</td>
                    <td>${estatusTexto}</td>
                    <td>${d.litrosRegistrados}</td>
                    <td>${d.fechaCreacion}</td>
                    <td> ${d.responsable} </td>
                     <td> ${d.zona} </td>
                    <td>
                        <form action="/Dispositivo/Delete/${d.id}" method="post" style="display:inline">
                            <input type="submit" value="Eliminar" class="btn btn-danger btn-sm" 
                            onclick="return confirm('¿Estás seguro de que deseas eliminar este dispositivo?');" />
                        </form>
                        <form method="post" action="/Dispositivo/CambiarEstado" style="display:inline">
                            <input type="hidden" name="id" value="${d.id}" />
                            <input type="submit" value="Cambiar Estado" class="btn btn-warning btn-sm" />
                        </form>
                    </td>
                </tr>
            `;
                    tbody.append(row);
                });
            });
        }
        function actualizarGraficaEstatus() {
            $.ajax({
                url: '/Dispositivo/ObtenerDatosGraficaEstatus',
                method: 'GET',
                success: function (data) {
                    estatusChart.data.datasets[0].data = [data.dispositivosApagados, data.dispositivosEncendidos];
                    estatusChart.update();
                }
            });
        } // <-- Cierra aquí

        function actualizarGraficaLitros() {
            $.ajax({
                url: '/Dispositivo/ObtenerDatosGraficaLitros',
                method: 'GET',
                success: function (data) {
                    litrosChart.data.labels = data.nombres;
                    litrosChart.data.datasets[0].data = data.litrosPorDispositivo;
                    litrosChart.update();
                }

            });
        } // <-- Cierra aquí

        function actualizarGraficaLitrosTotales() {
            $.ajax({
                url: '/Dispositivo/GetTotalLitros', // Asegúrate de tener este endpoint en tu servidor
                method: 'GET',
                success: function (data) {

                    litrosTotalChart.data.datasets[0].data = [data.totalLitros];  // Aquí adaptamos el acceso a la propiedad
                    litrosTotalChart.update();
                }
            });
        }


        function actualizarMarcadores() {
           
            var markersGroup = L.layerGroup().addTo(map);

            $.ajax({
                url: '/Dispositivo/GetAllDispositivos',
                method: 'GET',
                cache:false,
                success: function (data) {
                    console.log("Dispositivos recibidos del servidor:", data);
                    // Eliminar los marcadores actuales
                    markersGroup.clearLayers(); // primer uso

                    // Agregar los nuevos marcadores
                    data.forEach(function (dispositivo) {
                        L.marker([dispositivo.latitud, dispositivo.longitud]).addTo(markersGroup)
                            .bindPopup('Dispositivo : ' + dispositivo.nombre);
                    });
                }
            });
        }


        function MostrarNotificaciones(msj) {
            if (!("Notification" in window)) {
                alert("El navegador no soporta notificaciones");
            } else if (Notification.permission === "granted") {
                const noti = new Notification(msj);
            } else if (Notification.permission !== "denied") {
                Notification.requestPermission(function (permission) {
                    if (permission === "granted") {
                        const noti = new Notification("Permiso autorizado");
                    }
                });
            }
        }



    </script>


</body>

</html>
